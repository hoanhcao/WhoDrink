#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace whodrink.dal
{
    using System.Data.Linq;
    using System.Data.Linq.Mapping;
    using System.Data;
    using System.Collections.Generic;
    using System.Reflection;
    using System.Linq;
    using System.Linq.Expressions;
    using System.ComponentModel;
    using System;


    [global::System.Data.Linq.Mapping.DatabaseAttribute(Name = "WhoDrink")]
    public partial class WhoDrinkContext : System.Data.Linq.DataContext
    {

        private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();

        #region Extensibility Method Definitions
        partial void OnCreated();
        partial void InsertClub(Club instance);
        partial void UpdateClub(Club instance);
        partial void DeleteClub(Club instance);
        partial void InsertReviewCardMedia(ReviewCardMedia instance);
        partial void UpdateReviewCardMedia(ReviewCardMedia instance);
        partial void DeleteReviewCardMedia(ReviewCardMedia instance);
        partial void InsertDrinker(Drinker instance);
        partial void UpdateDrinker(Drinker instance);
        partial void DeleteDrinker(Drinker instance);
        partial void InsertDrinkLevel(DrinkLevel instance);
        partial void UpdateDrinkLevel(DrinkLevel instance);
        partial void DeleteDrinkLevel(DrinkLevel instance);
        partial void InsertInviteLetter(InviteLetter instance);
        partial void UpdateInviteLetter(InviteLetter instance);
        partial void DeleteInviteLetter(InviteLetter instance);
        partial void InsertLocation(Location instance);
        partial void UpdateLocation(Location instance);
        partial void DeleteLocation(Location instance);
        partial void InsertMediaObject(MediaObject instance);
        partial void UpdateMediaObject(MediaObject instance);
        partial void DeleteMediaObject(MediaObject instance);
        partial void InsertMenu(Menu instance);
        partial void UpdateMenu(Menu instance);
        partial void DeleteMenu(Menu instance);
        partial void InsertParty(Party instance);
        partial void UpdateParty(Party instance);
        partial void DeleteParty(Party instance);
        partial void InsertRestaurant(Restaurant instance);
        partial void UpdateRestaurant(Restaurant instance);
        partial void DeleteRestaurant(Restaurant instance);
        partial void InsertReviewCard(ReviewCard instance);
        partial void UpdateReviewCard(ReviewCard instance);
        partial void DeleteReviewCard(ReviewCard instance);
        #endregion

        public WhoDrinkContext() :
            base(global::System.Configuration
            .ConfigurationManager
            .ConnectionStrings["WhoDrinkConnectionString"]
            .ConnectionString, mappingSource)
        {
            OnCreated();
        }

        public WhoDrinkContext(string connection) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public WhoDrinkContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public WhoDrinkContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public WhoDrinkContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public System.Data.Linq.Table<Club> Clubs
        {
            get
            {
                return this.GetTable<Club>();
            }
        }

        public System.Data.Linq.Table<ReviewCardMedia> ReviewCardMedias
        {
            get
            {
                return this.GetTable<ReviewCardMedia>();
            }
        }

        public System.Data.Linq.Table<Drinker> Drinkers
        {
            get
            {
                return this.GetTable<Drinker>();
            }
        }

        public System.Data.Linq.Table<DrinkLevel> DrinkLevels
        {
            get
            {
                return this.GetTable<DrinkLevel>();
            }
        }

        public System.Data.Linq.Table<InviteLetter> InviteLetters
        {
            get
            {
                return this.GetTable<InviteLetter>();
            }
        }

        public System.Data.Linq.Table<Location> Locations
        {
            get
            {
                return this.GetTable<Location>();
            }
        }

        public System.Data.Linq.Table<MediaObject> MediaObjects
        {
            get
            {
                return this.GetTable<MediaObject>();
            }
        }

        public System.Data.Linq.Table<Menu> Menus
        {
            get
            {
                return this.GetTable<Menu>();
            }
        }

        public System.Data.Linq.Table<Party> Parties
        {
            get
            {
                return this.GetTable<Party>();
            }
        }

        public System.Data.Linq.Table<Restaurant> Restaurants
        {
            get
            {
                return this.GetTable<Restaurant>();
            }
        }

        public System.Data.Linq.Table<ReviewCard> ReviewCards
        {
            get
            {
                return this.GetTable<ReviewCard>();
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Club")]
    public partial class Club : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Id;

        private string _Coordinate;

        private int _OwnerId;

        private string _Title;

        private string _Description;

        private int _LocationId;

        private EntitySet<Drinker> _Drinkers;

        private EntityRef<Drinker> _Drinker;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnCoordinateChanging(string value);
        partial void OnCoordinateChanged();
        partial void OnOwnerIdChanging(int value);
        partial void OnOwnerIdChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnLocationIdChanging(int value);
        partial void OnLocationIdChanged();
        #endregion

        public Club()
        {
            this._Drinkers = new EntitySet<Drinker>(new Action<Drinker>(this.attach_Drinkers), new Action<Drinker>(this.detach_Drinkers));
            this._Drinker = default(EntityRef<Drinker>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Coordinate", DbType = "VarChar(25)")]
        public string Coordinate
        {
            get
            {
                return this._Coordinate;
            }
            set
            {
                if ((this._Coordinate != value))
                {
                    this.OnCoordinateChanging(value);
                    this.SendPropertyChanging();
                    this._Coordinate = value;
                    this.SendPropertyChanged("Coordinate");
                    this.OnCoordinateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OwnerId", DbType = "Int NOT NULL")]
        public int OwnerId
        {
            get
            {
                return this._OwnerId;
            }
            set
            {
                if ((this._OwnerId != value))
                {
                    if (this._Drinker.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnOwnerIdChanging(value);
                    this.SendPropertyChanging();
                    this._OwnerId = value;
                    this.SendPropertyChanged("OwnerId");
                    this.OnOwnerIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Title", DbType = "NVarChar(50)")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if ((this._Title != value))
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(MAX)")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_LocationId", DbType = "Int NOT NULL")]
        public int LocationId
        {
            get
            {
                return this._LocationId;
            }
            set
            {
                if ((this._LocationId != value))
                {
                    this.OnLocationIdChanging(value);
                    this.SendPropertyChanging();
                    this._LocationId = value;
                    this.SendPropertyChanged("LocationId");
                    this.OnLocationIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Club_Drinker", Storage = "_Drinkers", ThisKey = "Id", OtherKey = "ClubId")]
        public EntitySet<Drinker> Drinkers
        {
            get
            {
                return this._Drinkers;
            }
            set
            {
                this._Drinkers.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Drinker_Club", Storage = "_Drinker", ThisKey = "OwnerId", OtherKey = "Id", IsForeignKey = true)]
        public Drinker Drinker
        {
            get
            {
                return this._Drinker.Entity;
            }
            set
            {
                Drinker previousValue = this._Drinker.Entity;
                if (((previousValue != value)
                            || (this._Drinker.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Drinker.Entity = null;
                        previousValue.Clubs.Remove(this);
                    }
                    this._Drinker.Entity = value;
                    if ((value != null))
                    {
                        value.Clubs.Add(this);
                        this._OwnerId = value.Id;
                    }
                    else
                    {
                        this._OwnerId = default(int);
                    }
                    this.SendPropertyChanged("Drinker");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Drinkers(Drinker entity)
        {
            this.SendPropertyChanging();
            entity.Club = this;
        }

        private void detach_Drinkers(Drinker entity)
        {
            this.SendPropertyChanging();
            entity.Club = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ReviewCardMedia")]
    public partial class ReviewCardMedia : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ReviewCardId;

        private int _MediaObjectId;

        private EntityRef<MediaObject> _MediaObject;

        private EntityRef<ReviewCard> _ReviewCard;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnReviewCardIdChanging(int value);
        partial void OnReviewCardIdChanged();
        partial void OnMediaObjectIdChanging(int value);
        partial void OnMediaObjectIdChanged();
        #endregion

        public ReviewCardMedia()
        {
            this._MediaObject = default(EntityRef<MediaObject>);
            this._ReviewCard = default(EntityRef<ReviewCard>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ReviewCardId", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        public int ReviewCardId
        {
            get
            {
                return this._ReviewCardId;
            }
            set
            {
                if ((this._ReviewCardId != value))
                {
                    if (this._ReviewCard.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnReviewCardIdChanging(value);
                    this.SendPropertyChanging();
                    this._ReviewCardId = value;
                    this.SendPropertyChanged("ReviewCardId");
                    this.OnReviewCardIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_MediaObjectId", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        public int MediaObjectId
        {
            get
            {
                return this._MediaObjectId;
            }
            set
            {
                if ((this._MediaObjectId != value))
                {
                    if (this._MediaObject.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnMediaObjectIdChanging(value);
                    this.SendPropertyChanging();
                    this._MediaObjectId = value;
                    this.SendPropertyChanged("MediaObjectId");
                    this.OnMediaObjectIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "MediaObject_ReviewCardMedia", Storage = "_MediaObject", ThisKey = "MediaObjectId", OtherKey = "Id", IsForeignKey = true)]
        public MediaObject MediaObject
        {
            get
            {
                return this._MediaObject.Entity;
            }
            set
            {
                MediaObject previousValue = this._MediaObject.Entity;
                if (((previousValue != value)
                            || (this._MediaObject.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._MediaObject.Entity = null;
                        previousValue.ReviewCardMedias.Remove(this);
                    }
                    this._MediaObject.Entity = value;
                    if ((value != null))
                    {
                        value.ReviewCardMedias.Add(this);
                        this._MediaObjectId = value.Id;
                    }
                    else
                    {
                        this._MediaObjectId = default(int);
                    }
                    this.SendPropertyChanged("MediaObject");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "ReviewCard_ReviewCardMedia", Storage = "_ReviewCard", ThisKey = "ReviewCardId", OtherKey = "Id", IsForeignKey = true)]
        public ReviewCard ReviewCard
        {
            get
            {
                return this._ReviewCard.Entity;
            }
            set
            {
                ReviewCard previousValue = this._ReviewCard.Entity;
                if (((previousValue != value)
                            || (this._ReviewCard.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._ReviewCard.Entity = null;
                        previousValue.ReviewCardMedias.Remove(this);
                    }
                    this._ReviewCard.Entity = value;
                    if ((value != null))
                    {
                        value.ReviewCardMedias.Add(this);
                        this._ReviewCardId = value.Id;
                    }
                    else
                    {
                        this._ReviewCardId = default(int);
                    }
                    this.SendPropertyChanged("ReviewCard");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Drinker")]
    public partial class Drinker : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Id;

        private string _FullName;

        private string _NickName;

        private System.Data.Linq.Binary _Avatar;

        private int _LevelId;

        private System.Nullable<bool> _IsDeleted;

        private System.DateTime _CreatedDate;

        private System.DateTime _UpdatedDate;

        private int _LocationId;

        private System.Nullable<int> _ClubId;

        private EntitySet<Club> _Clubs;

        private EntitySet<InviteLetter> _InviteLetters;

        private EntitySet<ReviewCard> _ReviewCards;

        private EntityRef<Club> _Club;

        private EntityRef<DrinkLevel> _DrinkLevel;

        private EntityRef<Location> _Location;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnFullNameChanging(string value);
        partial void OnFullNameChanged();
        partial void OnNickNameChanging(string value);
        partial void OnNickNameChanged();
        partial void OnAvatarChanging(System.Data.Linq.Binary value);
        partial void OnAvatarChanged();
        partial void OnLevelIdChanging(int value);
        partial void OnLevelIdChanged();
        partial void OnIsDeletedChanging(System.Nullable<bool> value);
        partial void OnIsDeletedChanged();
        partial void OnCreatedDateChanging(System.DateTime value);
        partial void OnCreatedDateChanged();
        partial void OnUpdatedDateChanging(System.DateTime value);
        partial void OnUpdatedDateChanged();
        partial void OnLocationIdChanging(int value);
        partial void OnLocationIdChanged();
        partial void OnClubIdChanging(System.Nullable<int> value);
        partial void OnClubIdChanged();
        #endregion

        public Drinker()
        {
            this._Clubs = new EntitySet<Club>(new Action<Club>(this.attach_Clubs), new Action<Club>(this.detach_Clubs));
            this._InviteLetters = new EntitySet<InviteLetter>(new Action<InviteLetter>(this.attach_InviteLetters), new Action<InviteLetter>(this.detach_InviteLetters));
            this._ReviewCards = new EntitySet<ReviewCard>(new Action<ReviewCard>(this.attach_ReviewCards), new Action<ReviewCard>(this.detach_ReviewCards));
            this._Club = default(EntityRef<Club>);
            this._DrinkLevel = default(EntityRef<DrinkLevel>);
            this._Location = default(EntityRef<Location>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FullName", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string FullName
        {
            get
            {
                return this._FullName;
            }
            set
            {
                if ((this._FullName != value))
                {
                    this.OnFullNameChanging(value);
                    this.SendPropertyChanging();
                    this._FullName = value;
                    this.SendPropertyChanged("FullName");
                    this.OnFullNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_NickName", DbType = "NVarChar(100)")]
        public string NickName
        {
            get
            {
                return this._NickName;
            }
            set
            {
                if ((this._NickName != value))
                {
                    this.OnNickNameChanging(value);
                    this.SendPropertyChanging();
                    this._NickName = value;
                    this.SendPropertyChanged("NickName");
                    this.OnNickNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Avatar", DbType = "Binary(1)", UpdateCheck = UpdateCheck.Never)]
        public System.Data.Linq.Binary Avatar
        {
            get
            {
                return this._Avatar;
            }
            set
            {
                if ((this._Avatar != value))
                {
                    this.OnAvatarChanging(value);
                    this.SendPropertyChanging();
                    this._Avatar = value;
                    this.SendPropertyChanged("Avatar");
                    this.OnAvatarChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_LevelId", DbType = "Int NOT NULL")]
        public int LevelId
        {
            get
            {
                return this._LevelId;
            }
            set
            {
                if ((this._LevelId != value))
                {
                    if (this._DrinkLevel.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnLevelIdChanging(value);
                    this.SendPropertyChanging();
                    this._LevelId = value;
                    this.SendPropertyChanged("LevelId");
                    this.OnLevelIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsDeleted", DbType = "Bit")]
        public System.Nullable<bool> IsDeleted
        {
            get
            {
                return this._IsDeleted;
            }
            set
            {
                if ((this._IsDeleted != value))
                {
                    this.OnIsDeletedChanging(value);
                    this.SendPropertyChanging();
                    this._IsDeleted = value;
                    this.SendPropertyChanged("IsDeleted");
                    this.OnIsDeletedChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CreatedDate", DbType = "DateTime NOT NULL")]
        public System.DateTime CreatedDate
        {
            get
            {
                return this._CreatedDate;
            }
            set
            {
                if ((this._CreatedDate != value))
                {
                    this.OnCreatedDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreatedDate = value;
                    this.SendPropertyChanged("CreatedDate");
                    this.OnCreatedDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UpdatedDate", DbType = "DateTime NOT NULL")]
        public System.DateTime UpdatedDate
        {
            get
            {
                return this._UpdatedDate;
            }
            set
            {
                if ((this._UpdatedDate != value))
                {
                    this.OnUpdatedDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdatedDate = value;
                    this.SendPropertyChanged("UpdatedDate");
                    this.OnUpdatedDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_LocationId", DbType = "Int NOT NULL")]
        public int LocationId
        {
            get
            {
                return this._LocationId;
            }
            set
            {
                if ((this._LocationId != value))
                {
                    if (this._Location.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnLocationIdChanging(value);
                    this.SendPropertyChanging();
                    this._LocationId = value;
                    this.SendPropertyChanged("LocationId");
                    this.OnLocationIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ClubId", DbType = "Int")]
        public System.Nullable<int> ClubId
        {
            get
            {
                return this._ClubId;
            }
            set
            {
                if ((this._ClubId != value))
                {
                    if (this._Club.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnClubIdChanging(value);
                    this.SendPropertyChanging();
                    this._ClubId = value;
                    this.SendPropertyChanged("ClubId");
                    this.OnClubIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Drinker_Club", Storage = "_Clubs", ThisKey = "Id", OtherKey = "OwnerId")]
        public EntitySet<Club> Clubs
        {
            get
            {
                return this._Clubs;
            }
            set
            {
                this._Clubs.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Drinker_InviteLetter", Storage = "_InviteLetters", ThisKey = "Id", OtherKey = "DrinkerId")]
        public EntitySet<InviteLetter> InviteLetters
        {
            get
            {
                return this._InviteLetters;
            }
            set
            {
                this._InviteLetters.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Drinker_ReviewCard", Storage = "_ReviewCards", ThisKey = "Id", OtherKey = "OwnerId")]
        public EntitySet<ReviewCard> ReviewCards
        {
            get
            {
                return this._ReviewCards;
            }
            set
            {
                this._ReviewCards.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Club_Drinker", Storage = "_Club", ThisKey = "ClubId", OtherKey = "Id", IsForeignKey = true)]
        public Club Club
        {
            get
            {
                return this._Club.Entity;
            }
            set
            {
                Club previousValue = this._Club.Entity;
                if (((previousValue != value)
                            || (this._Club.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Club.Entity = null;
                        previousValue.Drinkers.Remove(this);
                    }
                    this._Club.Entity = value;
                    if ((value != null))
                    {
                        value.Drinkers.Add(this);
                        this._ClubId = value.Id;
                    }
                    else
                    {
                        this._ClubId = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("Club");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "DrinkLevel_Drinker", Storage = "_DrinkLevel", ThisKey = "LevelId", OtherKey = "Id", IsForeignKey = true)]
        public DrinkLevel DrinkLevel
        {
            get
            {
                return this._DrinkLevel.Entity;
            }
            set
            {
                DrinkLevel previousValue = this._DrinkLevel.Entity;
                if (((previousValue != value)
                            || (this._DrinkLevel.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._DrinkLevel.Entity = null;
                        previousValue.Drinkers.Remove(this);
                    }
                    this._DrinkLevel.Entity = value;
                    if ((value != null))
                    {
                        value.Drinkers.Add(this);
                        this._LevelId = value.Id;
                    }
                    else
                    {
                        this._LevelId = default(int);
                    }
                    this.SendPropertyChanged("DrinkLevel");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Location_Drinker", Storage = "_Location", ThisKey = "LocationId", OtherKey = "Id", IsForeignKey = true)]
        public Location Location
        {
            get
            {
                return this._Location.Entity;
            }
            set
            {
                Location previousValue = this._Location.Entity;
                if (((previousValue != value)
                            || (this._Location.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Location.Entity = null;
                        previousValue.Drinkers.Remove(this);
                    }
                    this._Location.Entity = value;
                    if ((value != null))
                    {
                        value.Drinkers.Add(this);
                        this._LocationId = value.Id;
                    }
                    else
                    {
                        this._LocationId = default(int);
                    }
                    this.SendPropertyChanged("Location");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Clubs(Club entity)
        {
            this.SendPropertyChanging();
            entity.Drinker = this;
        }

        private void detach_Clubs(Club entity)
        {
            this.SendPropertyChanging();
            entity.Drinker = null;
        }

        private void attach_InviteLetters(InviteLetter entity)
        {
            this.SendPropertyChanging();
            entity.Drinker = this;
        }

        private void detach_InviteLetters(InviteLetter entity)
        {
            this.SendPropertyChanging();
            entity.Drinker = null;
        }

        private void attach_ReviewCards(ReviewCard entity)
        {
            this.SendPropertyChanging();
            entity.Drinker = this;
        }

        private void detach_ReviewCards(ReviewCard entity)
        {
            this.SendPropertyChanging();
            entity.Drinker = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.DrinkLevel")]
    public partial class DrinkLevel : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Id;

        private string _Title;

        private string _Description;

        private EntitySet<Drinker> _Drinkers;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        #endregion

        public DrinkLevel()
        {
            this._Drinkers = new EntitySet<Drinker>(new Action<Drinker>(this.attach_Drinkers), new Action<Drinker>(this.detach_Drinkers));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Title", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if ((this._Title != value))
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(1000) NOT NULL", CanBeNull = false)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "DrinkLevel_Drinker", Storage = "_Drinkers", ThisKey = "Id", OtherKey = "LevelId")]
        public EntitySet<Drinker> Drinkers
        {
            get
            {
                return this._Drinkers;
            }
            set
            {
                this._Drinkers.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Drinkers(Drinker entity)
        {
            this.SendPropertyChanging();
            entity.DrinkLevel = this;
        }

        private void detach_Drinkers(Drinker entity)
        {
            this.SendPropertyChanging();
            entity.DrinkLevel = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.InviteLetter")]
    public partial class InviteLetter : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _DrinkerId;

        private int _PartyId;

        private System.DateTime _InvitedDate;

        private System.Nullable<System.DateTime> _JoinedDate;

        private bool _IsEnd;

        private EntityRef<Drinker> _Drinker;

        private EntityRef<Party> _Party;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnDrinkerIdChanging(int value);
        partial void OnDrinkerIdChanged();
        partial void OnPartyIdChanging(int value);
        partial void OnPartyIdChanged();
        partial void OnInvitedDateChanging(System.DateTime value);
        partial void OnInvitedDateChanged();
        partial void OnJoinedDateChanging(System.Nullable<System.DateTime> value);
        partial void OnJoinedDateChanged();
        partial void OnIsEndChanging(bool value);
        partial void OnIsEndChanged();
        #endregion

        public InviteLetter()
        {
            this._Drinker = default(EntityRef<Drinker>);
            this._Party = default(EntityRef<Party>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DrinkerId", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        public int DrinkerId
        {
            get
            {
                return this._DrinkerId;
            }
            set
            {
                if ((this._DrinkerId != value))
                {
                    if (this._Drinker.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnDrinkerIdChanging(value);
                    this.SendPropertyChanging();
                    this._DrinkerId = value;
                    this.SendPropertyChanged("DrinkerId");
                    this.OnDrinkerIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PartyId", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        public int PartyId
        {
            get
            {
                return this._PartyId;
            }
            set
            {
                if ((this._PartyId != value))
                {
                    if (this._Party.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnPartyIdChanging(value);
                    this.SendPropertyChanging();
                    this._PartyId = value;
                    this.SendPropertyChanged("PartyId");
                    this.OnPartyIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InvitedDate", DbType = "DateTime NOT NULL")]
        public System.DateTime InvitedDate
        {
            get
            {
                return this._InvitedDate;
            }
            set
            {
                if ((this._InvitedDate != value))
                {
                    this.OnInvitedDateChanging(value);
                    this.SendPropertyChanging();
                    this._InvitedDate = value;
                    this.SendPropertyChanged("InvitedDate");
                    this.OnInvitedDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_JoinedDate", DbType = "DateTime")]
        public System.Nullable<System.DateTime> JoinedDate
        {
            get
            {
                return this._JoinedDate;
            }
            set
            {
                if ((this._JoinedDate != value))
                {
                    this.OnJoinedDateChanging(value);
                    this.SendPropertyChanging();
                    this._JoinedDate = value;
                    this.SendPropertyChanged("JoinedDate");
                    this.OnJoinedDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsEnd", DbType = "Bit NOT NULL")]
        public bool IsEnd
        {
            get
            {
                return this._IsEnd;
            }
            set
            {
                if ((this._IsEnd != value))
                {
                    this.OnIsEndChanging(value);
                    this.SendPropertyChanging();
                    this._IsEnd = value;
                    this.SendPropertyChanged("IsEnd");
                    this.OnIsEndChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Drinker_InviteLetter", Storage = "_Drinker", ThisKey = "DrinkerId", OtherKey = "Id", IsForeignKey = true)]
        public Drinker Drinker
        {
            get
            {
                return this._Drinker.Entity;
            }
            set
            {
                Drinker previousValue = this._Drinker.Entity;
                if (((previousValue != value)
                            || (this._Drinker.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Drinker.Entity = null;
                        previousValue.InviteLetters.Remove(this);
                    }
                    this._Drinker.Entity = value;
                    if ((value != null))
                    {
                        value.InviteLetters.Add(this);
                        this._DrinkerId = value.Id;
                    }
                    else
                    {
                        this._DrinkerId = default(int);
                    }
                    this.SendPropertyChanged("Drinker");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Party_InviteLetter", Storage = "_Party", ThisKey = "PartyId", OtherKey = "Id", IsForeignKey = true)]
        public Party Party
        {
            get
            {
                return this._Party.Entity;
            }
            set
            {
                Party previousValue = this._Party.Entity;
                if (((previousValue != value)
                            || (this._Party.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Party.Entity = null;
                        previousValue.InviteLetters.Remove(this);
                    }
                    this._Party.Entity = value;
                    if ((value != null))
                    {
                        value.InviteLetters.Add(this);
                        this._PartyId = value.Id;
                    }
                    else
                    {
                        this._PartyId = default(int);
                    }
                    this.SendPropertyChanged("Party");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Location")]
    public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Id;

        private string _Name;

        private string _Coordinate;

        private System.Nullable<int> _ParentId;

        private EntitySet<Drinker> _Drinkers;

        private EntitySet<Location> _Locations;

        private EntitySet<Restaurant> _Restaurants;

        private EntityRef<Location> _Location1;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnCoordinateChanging(string value);
        partial void OnCoordinateChanged();
        partial void OnParentIdChanging(System.Nullable<int> value);
        partial void OnParentIdChanged();
        #endregion

        public Location()
        {
            this._Drinkers = new EntitySet<Drinker>(new Action<Drinker>(this.attach_Drinkers), new Action<Drinker>(this.detach_Drinkers));
            this._Locations = new EntitySet<Location>(new Action<Location>(this.attach_Locations), new Action<Location>(this.detach_Locations));
            this._Restaurants = new EntitySet<Restaurant>(new Action<Restaurant>(this.attach_Restaurants), new Action<Restaurant>(this.detach_Restaurants));
            this._Location1 = default(EntityRef<Location>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(500) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Coordinate", DbType = "Char(25) NOT NULL", CanBeNull = false)]
        public string Coordinate
        {
            get
            {
                return this._Coordinate;
            }
            set
            {
                if ((this._Coordinate != value))
                {
                    this.OnCoordinateChanging(value);
                    this.SendPropertyChanging();
                    this._Coordinate = value;
                    this.SendPropertyChanged("Coordinate");
                    this.OnCoordinateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ParentId", DbType = "Int")]
        public System.Nullable<int> ParentId
        {
            get
            {
                return this._ParentId;
            }
            set
            {
                if ((this._ParentId != value))
                {
                    if (this._Location1.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnParentIdChanging(value);
                    this.SendPropertyChanging();
                    this._ParentId = value;
                    this.SendPropertyChanged("ParentId");
                    this.OnParentIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Location_Drinker", Storage = "_Drinkers", ThisKey = "Id", OtherKey = "LocationId")]
        public EntitySet<Drinker> Drinkers
        {
            get
            {
                return this._Drinkers;
            }
            set
            {
                this._Drinkers.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Location_Location", Storage = "_Locations", ThisKey = "Id", OtherKey = "ParentId")]
        public EntitySet<Location> Locations
        {
            get
            {
                return this._Locations;
            }
            set
            {
                this._Locations.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Location_Restaurant", Storage = "_Restaurants", ThisKey = "Id", OtherKey = "LocationId")]
        public EntitySet<Restaurant> Restaurants
        {
            get
            {
                return this._Restaurants;
            }
            set
            {
                this._Restaurants.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Location_Location", Storage = "_Location1", ThisKey = "ParentId", OtherKey = "Id", IsForeignKey = true)]
        public Location Location1
        {
            get
            {
                return this._Location1.Entity;
            }
            set
            {
                Location previousValue = this._Location1.Entity;
                if (((previousValue != value)
                            || (this._Location1.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Location1.Entity = null;
                        previousValue.Locations.Remove(this);
                    }
                    this._Location1.Entity = value;
                    if ((value != null))
                    {
                        value.Locations.Add(this);
                        this._ParentId = value.Id;
                    }
                    else
                    {
                        this._ParentId = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("Location1");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Drinkers(Drinker entity)
        {
            this.SendPropertyChanging();
            entity.Location = this;
        }

        private void detach_Drinkers(Drinker entity)
        {
            this.SendPropertyChanging();
            entity.Location = null;
        }

        private void attach_Locations(Location entity)
        {
            this.SendPropertyChanging();
            entity.Location1 = this;
        }

        private void detach_Locations(Location entity)
        {
            this.SendPropertyChanging();
            entity.Location1 = null;
        }

        private void attach_Restaurants(Restaurant entity)
        {
            this.SendPropertyChanging();
            entity.Location = this;
        }

        private void detach_Restaurants(Restaurant entity)
        {
            this.SendPropertyChanging();
            entity.Location = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.MediaObject")]
    public partial class MediaObject : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Id;

        private string _Name;

        private string _Extension;

        private EntitySet<ReviewCardMedia> _ReviewCardMedias;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnExtensionChanging(string value);
        partial void OnExtensionChanged();
        #endregion

        public MediaObject()
        {
            this._ReviewCardMedias = new EntitySet<ReviewCardMedia>(new Action<ReviewCardMedia>(this.attach_ReviewCardMedias), new Action<ReviewCardMedia>(this.detach_ReviewCardMedias));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(50)")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Extension", DbType = "VarChar(5)")]
        public string Extension
        {
            get
            {
                return this._Extension;
            }
            set
            {
                if ((this._Extension != value))
                {
                    this.OnExtensionChanging(value);
                    this.SendPropertyChanging();
                    this._Extension = value;
                    this.SendPropertyChanged("Extension");
                    this.OnExtensionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "MediaObject_ReviewCardMedia", Storage = "_ReviewCardMedias", ThisKey = "Id", OtherKey = "MediaObjectId")]
        public EntitySet<ReviewCardMedia> ReviewCardMedias
        {
            get
            {
                return this._ReviewCardMedias;
            }
            set
            {
                this._ReviewCardMedias.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_ReviewCardMedias(ReviewCardMedia entity)
        {
            this.SendPropertyChanging();
            entity.MediaObject = this;
        }

        private void detach_ReviewCardMedias(ReviewCardMedia entity)
        {
            this.SendPropertyChanging();
            entity.MediaObject = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Menu")]
    public partial class Menu : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Id;

        private string _Description;

        private decimal _StandardPrice;

        private int _PartyId;

        private System.Nullable<int> _MediaObjId;

        private EntityRef<Party> _Party;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnStandardPriceChanging(decimal value);
        partial void OnStandardPriceChanged();
        partial void OnPartyIdChanging(int value);
        partial void OnPartyIdChanged();
        partial void OnMediaObjIdChanging(System.Nullable<int> value);
        partial void OnMediaObjIdChanged();
        #endregion

        public Menu()
        {
            this._Party = default(EntityRef<Party>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(500) NOT NULL", CanBeNull = false)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_StandardPrice", DbType = "Decimal(18,0) NOT NULL")]
        public decimal StandardPrice
        {
            get
            {
                return this._StandardPrice;
            }
            set
            {
                if ((this._StandardPrice != value))
                {
                    this.OnStandardPriceChanging(value);
                    this.SendPropertyChanging();
                    this._StandardPrice = value;
                    this.SendPropertyChanged("StandardPrice");
                    this.OnStandardPriceChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PartyId", DbType = "Int NOT NULL")]
        public int PartyId
        {
            get
            {
                return this._PartyId;
            }
            set
            {
                if ((this._PartyId != value))
                {
                    if (this._Party.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnPartyIdChanging(value);
                    this.SendPropertyChanging();
                    this._PartyId = value;
                    this.SendPropertyChanged("PartyId");
                    this.OnPartyIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_MediaObjId", DbType = "Int")]
        public System.Nullable<int> MediaObjId
        {
            get
            {
                return this._MediaObjId;
            }
            set
            {
                if ((this._MediaObjId != value))
                {
                    this.OnMediaObjIdChanging(value);
                    this.SendPropertyChanging();
                    this._MediaObjId = value;
                    this.SendPropertyChanged("MediaObjId");
                    this.OnMediaObjIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Party_Menu", Storage = "_Party", ThisKey = "PartyId", OtherKey = "Id", IsForeignKey = true)]
        public Party Party
        {
            get
            {
                return this._Party.Entity;
            }
            set
            {
                Party previousValue = this._Party.Entity;
                if (((previousValue != value)
                            || (this._Party.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Party.Entity = null;
                        previousValue.Menus.Remove(this);
                    }
                    this._Party.Entity = value;
                    if ((value != null))
                    {
                        value.Menus.Add(this);
                        this._PartyId = value.Id;
                    }
                    else
                    {
                        this._PartyId = default(int);
                    }
                    this.SendPropertyChanged("Party");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Party")]
    public partial class Party : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Id;

        private string _Title;

        private int _OwnerId;

        private System.Nullable<byte> _LimitNumber;

        private System.Nullable<int> _MenuId;

        private System.DateTime _StartDate;

        private System.DateTime _EndDate;

        private System.DateTime _CreatedDate;

        private System.Nullable<System.DateTime> _UpdatedDate;

        private EntitySet<InviteLetter> _InviteLetters;

        private EntitySet<Menu> _Menus;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnOwnerIdChanging(int value);
        partial void OnOwnerIdChanged();
        partial void OnLimitNumberChanging(System.Nullable<byte> value);
        partial void OnLimitNumberChanged();
        partial void OnMenuIdChanging(System.Nullable<int> value);
        partial void OnMenuIdChanged();
        partial void OnStartDateChanging(System.DateTime value);
        partial void OnStartDateChanged();
        partial void OnEndDateChanging(System.DateTime value);
        partial void OnEndDateChanged();
        partial void OnCreatedDateChanging(System.DateTime value);
        partial void OnCreatedDateChanged();
        partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdatedDateChanged();
        #endregion

        public Party()
        {
            this._InviteLetters = new EntitySet<InviteLetter>(new Action<InviteLetter>(this.attach_InviteLetters), new Action<InviteLetter>(this.detach_InviteLetters));
            this._Menus = new EntitySet<Menu>(new Action<Menu>(this.attach_Menus), new Action<Menu>(this.detach_Menus));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Title", DbType = "NVarChar(500)")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if ((this._Title != value))
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OwnerId", DbType = "Int NOT NULL")]
        public int OwnerId
        {
            get
            {
                return this._OwnerId;
            }
            set
            {
                if ((this._OwnerId != value))
                {
                    this.OnOwnerIdChanging(value);
                    this.SendPropertyChanging();
                    this._OwnerId = value;
                    this.SendPropertyChanged("OwnerId");
                    this.OnOwnerIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_LimitNumber", DbType = "TinyInt")]
        public System.Nullable<byte> LimitNumber
        {
            get
            {
                return this._LimitNumber;
            }
            set
            {
                if ((this._LimitNumber != value))
                {
                    this.OnLimitNumberChanging(value);
                    this.SendPropertyChanging();
                    this._LimitNumber = value;
                    this.SendPropertyChanged("LimitNumber");
                    this.OnLimitNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_MenuId", DbType = "Int")]
        public System.Nullable<int> MenuId
        {
            get
            {
                return this._MenuId;
            }
            set
            {
                if ((this._MenuId != value))
                {
                    this.OnMenuIdChanging(value);
                    this.SendPropertyChanging();
                    this._MenuId = value;
                    this.SendPropertyChanged("MenuId");
                    this.OnMenuIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_StartDate", DbType = "Date NOT NULL")]
        public System.DateTime StartDate
        {
            get
            {
                return this._StartDate;
            }
            set
            {
                if ((this._StartDate != value))
                {
                    this.OnStartDateChanging(value);
                    this.SendPropertyChanging();
                    this._StartDate = value;
                    this.SendPropertyChanged("StartDate");
                    this.OnStartDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_EndDate", DbType = "Date NOT NULL")]
        public System.DateTime EndDate
        {
            get
            {
                return this._EndDate;
            }
            set
            {
                if ((this._EndDate != value))
                {
                    this.OnEndDateChanging(value);
                    this.SendPropertyChanging();
                    this._EndDate = value;
                    this.SendPropertyChanged("EndDate");
                    this.OnEndDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CreatedDate", DbType = "DateTime NOT NULL")]
        public System.DateTime CreatedDate
        {
            get
            {
                return this._CreatedDate;
            }
            set
            {
                if ((this._CreatedDate != value))
                {
                    this.OnCreatedDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreatedDate = value;
                    this.SendPropertyChanged("CreatedDate");
                    this.OnCreatedDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UpdatedDate", DbType = "DateTime")]
        public System.Nullable<System.DateTime> UpdatedDate
        {
            get
            {
                return this._UpdatedDate;
            }
            set
            {
                if ((this._UpdatedDate != value))
                {
                    this.OnUpdatedDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdatedDate = value;
                    this.SendPropertyChanged("UpdatedDate");
                    this.OnUpdatedDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Party_InviteLetter", Storage = "_InviteLetters", ThisKey = "Id", OtherKey = "PartyId")]
        public EntitySet<InviteLetter> InviteLetters
        {
            get
            {
                return this._InviteLetters;
            }
            set
            {
                this._InviteLetters.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Party_Menu", Storage = "_Menus", ThisKey = "Id", OtherKey = "PartyId")]
        public EntitySet<Menu> Menus
        {
            get
            {
                return this._Menus;
            }
            set
            {
                this._Menus.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_InviteLetters(InviteLetter entity)
        {
            this.SendPropertyChanging();
            entity.Party = this;
        }

        private void detach_InviteLetters(InviteLetter entity)
        {
            this.SendPropertyChanging();
            entity.Party = null;
        }

        private void attach_Menus(Menu entity)
        {
            this.SendPropertyChanging();
            entity.Party = this;
        }

        private void detach_Menus(Menu entity)
        {
            this.SendPropertyChanging();
            entity.Party = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Restaurant")]
    public partial class Restaurant : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Id;

        private string _Address;

        private string _Name;

        private string _Description;

        private string _Coordinate;

        private System.Nullable<int> _LocationId;

        private System.DateTime _CreatedDate;

        private System.Nullable<System.DateTime> _UpdatedDate;

        private EntityRef<Location> _Location;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnCoordinateChanging(string value);
        partial void OnCoordinateChanged();
        partial void OnLocationIdChanging(System.Nullable<int> value);
        partial void OnLocationIdChanged();
        partial void OnCreatedDateChanging(System.DateTime value);
        partial void OnCreatedDateChanged();
        partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdatedDateChanged();
        #endregion

        public Restaurant()
        {
            this._Location = default(EntityRef<Location>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Address", DbType = "NVarChar(500) NOT NULL", CanBeNull = false)]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if ((this._Address != value))
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging();
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Coordinate", DbType = "Char(25) NOT NULL", CanBeNull = false)]
        public string Coordinate
        {
            get
            {
                return this._Coordinate;
            }
            set
            {
                if ((this._Coordinate != value))
                {
                    this.OnCoordinateChanging(value);
                    this.SendPropertyChanging();
                    this._Coordinate = value;
                    this.SendPropertyChanged("Coordinate");
                    this.OnCoordinateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_LocationId", DbType = "Int")]
        public System.Nullable<int> LocationId
        {
            get
            {
                return this._LocationId;
            }
            set
            {
                if ((this._LocationId != value))
                {
                    if (this._Location.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnLocationIdChanging(value);
                    this.SendPropertyChanging();
                    this._LocationId = value;
                    this.SendPropertyChanged("LocationId");
                    this.OnLocationIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CreatedDate", DbType = "DateTime NOT NULL")]
        public System.DateTime CreatedDate
        {
            get
            {
                return this._CreatedDate;
            }
            set
            {
                if ((this._CreatedDate != value))
                {
                    this.OnCreatedDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreatedDate = value;
                    this.SendPropertyChanged("CreatedDate");
                    this.OnCreatedDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UpdatedDate", DbType = "DateTime")]
        public System.Nullable<System.DateTime> UpdatedDate
        {
            get
            {
                return this._UpdatedDate;
            }
            set
            {
                if ((this._UpdatedDate != value))
                {
                    this.OnUpdatedDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdatedDate = value;
                    this.SendPropertyChanged("UpdatedDate");
                    this.OnUpdatedDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Location_Restaurant", Storage = "_Location", ThisKey = "LocationId", OtherKey = "Id", IsForeignKey = true)]
        public Location Location
        {
            get
            {
                return this._Location.Entity;
            }
            set
            {
                Location previousValue = this._Location.Entity;
                if (((previousValue != value)
                            || (this._Location.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Location.Entity = null;
                        previousValue.Restaurants.Remove(this);
                    }
                    this._Location.Entity = value;
                    if ((value != null))
                    {
                        value.Restaurants.Add(this);
                        this._LocationId = value.Id;
                    }
                    else
                    {
                        this._LocationId = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("Location");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ReviewCard")]
    public partial class ReviewCard : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Id;

        private int _OwnerId;

        private byte _CartType;

        private string _Title;

        private string _LongDescription;

        private System.DateTime _CreatedDate;

        private System.Nullable<System.DateTime> _UpdatedDate;

        private EntitySet<ReviewCardMedia> _ReviewCardMedias;

        private EntityRef<Drinker> _Drinker;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnOwnerIdChanging(int value);
        partial void OnOwnerIdChanged();
        partial void OnCartTypeChanging(byte value);
        partial void OnCartTypeChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnLongDescriptionChanging(string value);
        partial void OnLongDescriptionChanged();
        partial void OnCreatedDateChanging(System.DateTime value);
        partial void OnCreatedDateChanged();
        partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdatedDateChanged();
        #endregion

        public ReviewCard()
        {
            this._ReviewCardMedias = new EntitySet<ReviewCardMedia>(new Action<ReviewCardMedia>(this.attach_ReviewCardMedias), new Action<ReviewCardMedia>(this.detach_ReviewCardMedias));
            this._Drinker = default(EntityRef<Drinker>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OwnerId", DbType = "Int NOT NULL")]
        public int OwnerId
        {
            get
            {
                return this._OwnerId;
            }
            set
            {
                if ((this._OwnerId != value))
                {
                    if (this._Drinker.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnOwnerIdChanging(value);
                    this.SendPropertyChanging();
                    this._OwnerId = value;
                    this.SendPropertyChanged("OwnerId");
                    this.OnOwnerIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CartType", DbType = "TinyInt NOT NULL")]
        public byte CartType
        {
            get
            {
                return this._CartType;
            }
            set
            {
                if ((this._CartType != value))
                {
                    this.OnCartTypeChanging(value);
                    this.SendPropertyChanging();
                    this._CartType = value;
                    this.SendPropertyChanged("CartType");
                    this.OnCartTypeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Title", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if ((this._Title != value))
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_LongDescription", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false)]
        public string LongDescription
        {
            get
            {
                return this._LongDescription;
            }
            set
            {
                if ((this._LongDescription != value))
                {
                    this.OnLongDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._LongDescription = value;
                    this.SendPropertyChanged("LongDescription");
                    this.OnLongDescriptionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CreatedDate", DbType = "DateTime NOT NULL")]
        public System.DateTime CreatedDate
        {
            get
            {
                return this._CreatedDate;
            }
            set
            {
                if ((this._CreatedDate != value))
                {
                    this.OnCreatedDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreatedDate = value;
                    this.SendPropertyChanged("CreatedDate");
                    this.OnCreatedDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UpdatedDate", DbType = "DateTime")]
        public System.Nullable<System.DateTime> UpdatedDate
        {
            get
            {
                return this._UpdatedDate;
            }
            set
            {
                if ((this._UpdatedDate != value))
                {
                    this.OnUpdatedDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdatedDate = value;
                    this.SendPropertyChanged("UpdatedDate");
                    this.OnUpdatedDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "ReviewCard_ReviewCardMedia", Storage = "_ReviewCardMedias", ThisKey = "Id", OtherKey = "ReviewCardId")]
        public EntitySet<ReviewCardMedia> ReviewCardMedias
        {
            get
            {
                return this._ReviewCardMedias;
            }
            set
            {
                this._ReviewCardMedias.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Drinker_ReviewCard", Storage = "_Drinker", ThisKey = "OwnerId", OtherKey = "Id", IsForeignKey = true)]
        public Drinker Drinker
        {
            get
            {
                return this._Drinker.Entity;
            }
            set
            {
                Drinker previousValue = this._Drinker.Entity;
                if (((previousValue != value)
                            || (this._Drinker.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Drinker.Entity = null;
                        previousValue.ReviewCards.Remove(this);
                    }
                    this._Drinker.Entity = value;
                    if ((value != null))
                    {
                        value.ReviewCards.Add(this);
                        this._OwnerId = value.Id;
                    }
                    else
                    {
                        this._OwnerId = default(int);
                    }
                    this.SendPropertyChanged("Drinker");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_ReviewCardMedias(ReviewCardMedia entity)
        {
            this.SendPropertyChanging();
            entity.ReviewCard = this;
        }

        private void detach_ReviewCardMedias(ReviewCardMedia entity)
        {
            this.SendPropertyChanging();
            entity.ReviewCard = null;
        }
    }
}
#pragma warning restore 1591
